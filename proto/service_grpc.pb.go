// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*Status, error)
	// TODO: Consider moving cluster RPCs to dedicated Cluster service and removing cluster from names.
	GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*ClusterInfo, error)
	AddClusterMember(ctx context.Context, in *AddClusterMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveClusterMember(ctx context.Context, in *RemoveClusterMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/z4.Admin/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*ClusterInfo, error) {
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, "/z4.Admin/GetClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddClusterMember(ctx context.Context, in *AddClusterMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/z4.Admin/AddClusterMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RemoveClusterMember(ctx context.Context, in *RemoveClusterMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/z4.Admin/RemoveClusterMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	CheckHealth(context.Context, *CheckHealthRequest) (*Status, error)
	// TODO: Consider moving cluster RPCs to dedicated Cluster service and removing cluster from names.
	GetClusterInfo(context.Context, *GetClusterInfoRequest) (*ClusterInfo, error)
	AddClusterMember(context.Context, *AddClusterMemberRequest) (*emptypb.Empty, error)
	RemoveClusterMember(context.Context, *RemoveClusterMemberRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) CheckHealth(context.Context, *CheckHealthRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedAdminServer) GetClusterInfo(context.Context, *GetClusterInfoRequest) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedAdminServer) AddClusterMember(context.Context, *AddClusterMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClusterMember not implemented")
}
func (UnimplementedAdminServer) RemoveClusterMember(context.Context, *RemoveClusterMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClusterMember not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/z4.Admin/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CheckHealth(ctx, req.(*CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/z4.Admin/GetClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetClusterInfo(ctx, req.(*GetClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddClusterMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClusterMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddClusterMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/z4.Admin/AddClusterMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddClusterMember(ctx, req.(*AddClusterMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RemoveClusterMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClusterMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RemoveClusterMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/z4.Admin/RemoveClusterMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RemoveClusterMember(ctx, req.(*RemoveClusterMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "z4.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _Admin_CheckHealth_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _Admin_GetClusterInfo_Handler,
		},
		{
			MethodName: "AddClusterMember",
			Handler:    _Admin_AddClusterMember_Handler,
		},
		{
			MethodName: "RemoveClusterMember",
			Handler:    _Admin_RemoveClusterMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// CollectionClient is the client API for Collection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	CreateTaskStream(ctx context.Context, opts ...grpc.CallOption) (Collection_CreateTaskStreamClient, error)
	CreateTaskAsync(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	CreateTaskStreamAsync(ctx context.Context, opts ...grpc.CallOption) (Collection_CreateTaskStreamAsyncClient, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	GetTaskStream(ctx context.Context, in *StreamTasksRequest, opts ...grpc.CallOption) (Collection_GetTaskStreamClient, error)
}

type collectionClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionClient(cc grpc.ClientConnInterface) CollectionClient {
	return &collectionClient{cc}
}

func (c *collectionClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/z4.Collection/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) CreateTaskStream(ctx context.Context, opts ...grpc.CallOption) (Collection_CreateTaskStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collection_ServiceDesc.Streams[0], "/z4.Collection/CreateTaskStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionCreateTaskStreamClient{stream}
	return x, nil
}

type Collection_CreateTaskStreamClient interface {
	Send(*CreateTaskRequest) error
	Recv() (*TaskStreamResponse, error)
	grpc.ClientStream
}

type collectionCreateTaskStreamClient struct {
	grpc.ClientStream
}

func (x *collectionCreateTaskStreamClient) Send(m *CreateTaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectionCreateTaskStreamClient) Recv() (*TaskStreamResponse, error) {
	m := new(TaskStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectionClient) CreateTaskAsync(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/z4.Collection/CreateTaskAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) CreateTaskStreamAsync(ctx context.Context, opts ...grpc.CallOption) (Collection_CreateTaskStreamAsyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collection_ServiceDesc.Streams[1], "/z4.Collection/CreateTaskStreamAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionCreateTaskStreamAsyncClient{stream}
	return x, nil
}

type Collection_CreateTaskStreamAsyncClient interface {
	Send(*CreateTaskRequest) error
	Recv() (*TaskStreamResponse, error)
	grpc.ClientStream
}

type collectionCreateTaskStreamAsyncClient struct {
	grpc.ClientStream
}

func (x *collectionCreateTaskStreamAsyncClient) Send(m *CreateTaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectionCreateTaskStreamAsyncClient) Recv() (*TaskStreamResponse, error) {
	m := new(TaskStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectionClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/z4.Collection/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) GetTaskStream(ctx context.Context, in *StreamTasksRequest, opts ...grpc.CallOption) (Collection_GetTaskStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collection_ServiceDesc.Streams[2], "/z4.Collection/GetTaskStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionGetTaskStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collection_GetTaskStreamClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type collectionGetTaskStreamClient struct {
	grpc.ClientStream
}

func (x *collectionGetTaskStreamClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectionServer is the server API for Collection service.
// All implementations must embed UnimplementedCollectionServer
// for forward compatibility
type CollectionServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	CreateTaskStream(Collection_CreateTaskStreamServer) error
	CreateTaskAsync(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	CreateTaskStreamAsync(Collection_CreateTaskStreamAsyncServer) error
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	GetTaskStream(*StreamTasksRequest, Collection_GetTaskStreamServer) error
	mustEmbedUnimplementedCollectionServer()
}

// UnimplementedCollectionServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionServer struct {
}

func (UnimplementedCollectionServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedCollectionServer) CreateTaskStream(Collection_CreateTaskStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTaskStream not implemented")
}
func (UnimplementedCollectionServer) CreateTaskAsync(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskAsync not implemented")
}
func (UnimplementedCollectionServer) CreateTaskStreamAsync(Collection_CreateTaskStreamAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTaskStreamAsync not implemented")
}
func (UnimplementedCollectionServer) GetTask(context.Context, *GetTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedCollectionServer) GetTaskStream(*StreamTasksRequest, Collection_GetTaskStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskStream not implemented")
}
func (UnimplementedCollectionServer) mustEmbedUnimplementedCollectionServer() {}

// UnsafeCollectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionServer will
// result in compilation errors.
type UnsafeCollectionServer interface {
	mustEmbedUnimplementedCollectionServer()
}

func RegisterCollectionServer(s grpc.ServiceRegistrar, srv CollectionServer) {
	s.RegisterService(&Collection_ServiceDesc, srv)
}

func _Collection_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/z4.Collection/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_CreateTaskStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectionServer).CreateTaskStream(&collectionCreateTaskStreamServer{stream})
}

type Collection_CreateTaskStreamServer interface {
	Send(*TaskStreamResponse) error
	Recv() (*CreateTaskRequest, error)
	grpc.ServerStream
}

type collectionCreateTaskStreamServer struct {
	grpc.ServerStream
}

func (x *collectionCreateTaskStreamServer) Send(m *TaskStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectionCreateTaskStreamServer) Recv() (*CreateTaskRequest, error) {
	m := new(CreateTaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Collection_CreateTaskAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).CreateTaskAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/z4.Collection/CreateTaskAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).CreateTaskAsync(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_CreateTaskStreamAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectionServer).CreateTaskStreamAsync(&collectionCreateTaskStreamAsyncServer{stream})
}

type Collection_CreateTaskStreamAsyncServer interface {
	Send(*TaskStreamResponse) error
	Recv() (*CreateTaskRequest, error)
	grpc.ServerStream
}

type collectionCreateTaskStreamAsyncServer struct {
	grpc.ServerStream
}

func (x *collectionCreateTaskStreamAsyncServer) Send(m *TaskStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectionCreateTaskStreamAsyncServer) Recv() (*CreateTaskRequest, error) {
	m := new(CreateTaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Collection_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/z4.Collection/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_GetTaskStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionServer).GetTaskStream(m, &collectionGetTaskStreamServer{stream})
}

type Collection_GetTaskStreamServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type collectionGetTaskStreamServer struct {
	grpc.ServerStream
}

func (x *collectionGetTaskStreamServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

// Collection_ServiceDesc is the grpc.ServiceDesc for Collection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "z4.Collection",
	HandlerType: (*CollectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Collection_CreateTask_Handler,
		},
		{
			MethodName: "CreateTaskAsync",
			Handler:    _Collection_CreateTaskAsync_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Collection_GetTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateTaskStream",
			Handler:       _Collection_CreateTaskStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateTaskStreamAsync",
			Handler:       _Collection_CreateTaskStreamAsync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTaskStream",
			Handler:       _Collection_GetTaskStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
