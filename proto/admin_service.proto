syntax = "proto3";
package z4;
option go_package = "github.com/mlposey/z4/proto;proto";

import "google/protobuf/empty.proto";
import "model.proto";

// The Admin service supports administrative/maintenance operations.
service Admin {
  // CheckHealth determines whether the service is in a healthy state.
  rpc CheckHealth(CheckHealthRequest) returns (Status) {};

  // GetQueue gets settings for a task queue.
  rpc GetQueue(GetQueueRequest) returns (QueueConfig) {};

  // UpdateQueue updates the settings of a task queue.
  rpc UpdateQueue(UpdateQueueRequest) returns (QueueConfig) {};

  // GetClusterInfo returns information about the structure of the Raft cluster.
  rpc GetClusterInfo(GetClusterInfoRequest) returns (ClusterInfo) {};

  // AddClusterMember adds a peer to the Raft cluster.
  //
  // This rpc should be called on the leader but can be invoked on any peer that
  // is connected to the leader.
  rpc AddClusterMember(AddClusterMemberRequest) returns (google.protobuf.Empty) {};

  // RemoveClusterMember removes a peer from the Raft cluster.
  //
  // This rpc should be called on the leader but can be invoked on any peer that
  // is connected to the leader.
  rpc RemoveClusterMember(RemoveClusterMemberRequest) returns (google.protobuf.Empty) {};

  rpc BootstrapCluster(google.protobuf.Empty) returns (google.protobuf.Empty) {};
}

message CheckHealthRequest {
  // A unique id for the request.
  string request_id = 1;
}

message Status {
}

message GetQueueRequest {
  string request_id = 1;
  string queue = 2;
}

message UpdateQueueRequest {
  string request_id = 1;

  // A new version of the queue
  //
  // The following fields cannot be updated
  // - id
  // - last_delivered_task
  QueueConfig queue = 2;

  // TODO: Add field mask support so we can selectively update parts of the queue.
}

message GetClusterInfoRequest {
  string request_id = 1;
}

// ClusterInfo contains information about the cluster.
message ClusterInfo {
  // The unique id of the peer that the request was sent to.
  string server_id = 1;

  // The host:port of the cluster leader's Raft server.
  string leader_address = 2;

  // All peers of the cluster.
  repeated Server members = 3;
}

// TODO: Rename this to Peer.
// Server is a member of the cluster.
message Server {
  // The unique id of the peer.
  string id = 1;

  // The host:port of the peer's Raft server.
  string address = 2;
}

message AddClusterMemberRequest {
  // The host:port of the peer's Raft server.
  string member_address = 1;

  // The unique id of the peer.
  string member_id = 2;
}

message RemoveClusterMemberRequest {
  // The unique id of the peer.
  string member_id = 1;
}
