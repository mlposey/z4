// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: queue_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueueClient is the client API for Queue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueClient interface {
	// Push adds a task to the queue.
	//
	// This rpc should be called on the leader.
	Push(ctx context.Context, in *PushTaskRequest, opts ...grpc.CallOption) (*PushTaskResponse, error)
	// PushStream opens a bi-directional stream for adding tasks.
	//
	// PushStream offers higher throughput than Push if many tasks need
	// to be added in quick succession.
	//
	// This rpc should be called on the leader.
	PushStream(ctx context.Context, opts ...grpc.CallOption) (Queue_PushStreamClient, error)
	// Pull opens a bi-directional stream for consuming ready tasks.
	//
	// Metadata must be passed to the server to indicate which
	// queue to consume from. The metadata key must be "queue"
	// and its value a single string that identifies the queue.
	//
	// This rpc must be called on the leader.
	Pull(ctx context.Context, opts ...grpc.CallOption) (Queue_PullClient, error)
	// Get retrieves a task by its ID.
	//
	// This rpc only works for scheduled tasks.
	Get(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	// Delete removes a task from the queue before it is delivered.
	//
	// This should be used to delete tasks that are not yet ready
	// for consumption. If consuming tasks using the Pull method,
	// the acknowledgement functionality should be used instead of
	// Delete.
	Delete(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
}

type queueClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueClient(cc grpc.ClientConnInterface) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) Push(ctx context.Context, in *PushTaskRequest, opts ...grpc.CallOption) (*PushTaskResponse, error) {
	out := new(PushTaskResponse)
	err := c.cc.Invoke(ctx, "/z4.Queue/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) PushStream(ctx context.Context, opts ...grpc.CallOption) (Queue_PushStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Queue_ServiceDesc.Streams[0], "/z4.Queue/PushStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &queuePushStreamClient{stream}
	return x, nil
}

type Queue_PushStreamClient interface {
	Send(*PushTaskRequest) error
	Recv() (*PushStreamResponse, error)
	grpc.ClientStream
}

type queuePushStreamClient struct {
	grpc.ClientStream
}

func (x *queuePushStreamClient) Send(m *PushTaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queuePushStreamClient) Recv() (*PushStreamResponse, error) {
	m := new(PushStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queueClient) Pull(ctx context.Context, opts ...grpc.CallOption) (Queue_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &Queue_ServiceDesc.Streams[1], "/z4.Queue/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &queuePullClient{stream}
	return x, nil
}

type Queue_PullClient interface {
	Send(*Ack) error
	Recv() (*Task, error)
	grpc.ClientStream
}

type queuePullClient struct {
	grpc.ClientStream
}

func (x *queuePullClient) Send(m *Ack) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queuePullClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queueClient) Get(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/z4.Queue/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) Delete(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/z4.Queue/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServer is the server API for Queue service.
// All implementations must embed UnimplementedQueueServer
// for forward compatibility
type QueueServer interface {
	// Push adds a task to the queue.
	//
	// This rpc should be called on the leader.
	Push(context.Context, *PushTaskRequest) (*PushTaskResponse, error)
	// PushStream opens a bi-directional stream for adding tasks.
	//
	// PushStream offers higher throughput than Push if many tasks need
	// to be added in quick succession.
	//
	// This rpc should be called on the leader.
	PushStream(Queue_PushStreamServer) error
	// Pull opens a bi-directional stream for consuming ready tasks.
	//
	// Metadata must be passed to the server to indicate which
	// queue to consume from. The metadata key must be "queue"
	// and its value a single string that identifies the queue.
	//
	// This rpc must be called on the leader.
	Pull(Queue_PullServer) error
	// Get retrieves a task by its ID.
	//
	// This rpc only works for scheduled tasks.
	Get(context.Context, *GetTaskRequest) (*Task, error)
	// Delete removes a task from the queue before it is delivered.
	//
	// This should be used to delete tasks that are not yet ready
	// for consumption. If consuming tasks using the Pull method,
	// the acknowledgement functionality should be used instead of
	// Delete.
	Delete(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	mustEmbedUnimplementedQueueServer()
}

// UnimplementedQueueServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServer struct {
}

func (UnimplementedQueueServer) Push(context.Context, *PushTaskRequest) (*PushTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedQueueServer) PushStream(Queue_PushStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PushStream not implemented")
}
func (UnimplementedQueueServer) Pull(Queue_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedQueueServer) Get(context.Context, *GetTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedQueueServer) Delete(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedQueueServer) mustEmbedUnimplementedQueueServer() {}

// UnsafeQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServer will
// result in compilation errors.
type UnsafeQueueServer interface {
	mustEmbedUnimplementedQueueServer()
}

func RegisterQueueServer(s grpc.ServiceRegistrar, srv QueueServer) {
	s.RegisterService(&Queue_ServiceDesc, srv)
}

func _Queue_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/z4.Queue/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Push(ctx, req.(*PushTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_PushStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueueServer).PushStream(&queuePushStreamServer{stream})
}

type Queue_PushStreamServer interface {
	Send(*PushStreamResponse) error
	Recv() (*PushTaskRequest, error)
	grpc.ServerStream
}

type queuePushStreamServer struct {
	grpc.ServerStream
}

func (x *queuePushStreamServer) Send(m *PushStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queuePushStreamServer) Recv() (*PushTaskRequest, error) {
	m := new(PushTaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Queue_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueueServer).Pull(&queuePullServer{stream})
}

type Queue_PullServer interface {
	Send(*Task) error
	Recv() (*Ack, error)
	grpc.ServerStream
}

type queuePullServer struct {
	grpc.ServerStream
}

func (x *queuePullServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queuePullServer) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Queue_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/z4.Queue/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Get(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/z4.Queue/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Delete(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Queue_ServiceDesc is the grpc.ServiceDesc for Queue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Queue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "z4.Queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Queue_Push_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Queue_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Queue_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushStream",
			Handler:       _Queue_PushStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _Queue_Pull_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "queue_service.proto",
}
