syntax = "proto3";
package z4;
option go_package = "github.com/mlposey/z4/proto;proto";

import "google/protobuf/timestamp.proto";

// Command is any command replicated by Raft peers and applied to their FSM.
message Command {
  oneof cmd {
    // A request to save a task.
    Task task = 1;

    // A request to acknowledge a task so that it is not redelivered.
    Ack ack = 2;

    // A request to save a namespace.
    Namespace namespace = 3;
  }
}

message Task {
  string id = 1;
  string namespace = 2;
  map<string, string> metadata = 3;
  bytes payload = 4;
  google.protobuf.Timestamp schedule_time = 5;
  // Last time the task was sent to the client due to not receiving an ack.
  google.protobuf.Timestamp last_retry = 6;
  uint64 index = 7;
}

// TaskReference is a unique reference to a task.
message TaskReference {
  // The namespace where the task is located.
  string namespace = 1;

  // The id of the task
  oneof id {
    // The task id if the task was scheduled.
    string task_id = 2;

    // The task index if the task was enqueued.
    uint64 index = 3;
  }
}

message Ack {
  TaskReference reference = 1;
}

message Namespace {
  // The unique id of the namespace.
  string id = 1;

  // The id of the last scheduled task that was sent to a client.
  string last_task = 2;

  // The length of time after sending a message that it will
  // be redelivered if not acknowledged.
  int32 ack_deadline_seconds = 3;

  // The index of the last queued task that was sent to the client.
  uint64 last_index = 4;
}
